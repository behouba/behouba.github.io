<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Golang on Behouba Manassé K</title><link>https://behouba.github.io/tags/golang/</link><description>Recent content in Golang on Behouba Manassé K</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 03 Oct 2023 11:25:52 +0300</lastBuildDate><atom:link href="https://behouba.github.io/tags/golang/index.xml" rel="self" type="application/rss+xml"/><item><title>Memory Forensics analysis of container checkpoints with checkpointctl</title><link>https://behouba.github.io/2023/10/memory-forensics-analysis-of-container-checkpoints-with-checkpointctl/</link><pubDate>Tue, 03 Oct 2023 11:25:52 +0300</pubDate><guid>https://behouba.github.io/2023/10/memory-forensics-analysis-of-container-checkpoints-with-checkpointctl/</guid><description>&lt;h2 id="introduction"&gt;
Introduction
&lt;a href="#introduction" class="hanchor" ariaLabel="Anchor"&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;In the field of computer science, forensic analysis, also known as computer forensics, is a specialized domain that focuses on the extraction of evidence from electronic devices and digital data. Forensic analysis goals are to identify, preserve, recover, analyze, and ultimately present factual information and expert opinions about cybercrimes or other digital activities. The computer forensic analyst uses various techniques and tools to guide his investigations. Tools such as Wireshark, Volatility, Autopsy, and others are popular forensic analysis tools across various operating systems. In recent years, containerized applications have become popular. Containers are not immune to cyberattacks, and when there are suspicious malicious activities, it may be useful to be able to investigate our container without disturbing the operation of that container. This is when &lt;code&gt;checkpoinctl&lt;/code&gt; came in handy. &lt;code&gt;checkpointcl&lt;/code&gt; is CLI project from the open-source organization CRIU (Checkpoint Restore In Userspace) that makes it easy to inspect container checkpoints created by CRIU. In this article, we will see how &lt;code&gt;checkpointcl&lt;/code&gt; can be used as a forensic analysis tool for container checkpoints.&lt;/p&gt;</description><content>
&lt;h2 id="introduction"&gt;
Introduction
&lt;a href="#introduction" class="hanchor" ariaLabel="Anchor"&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;In the field of computer science, forensic analysis, also known as computer forensics, is a specialized domain that focuses on the extraction of evidence from electronic devices and digital data. Forensic analysis goals are to identify, preserve, recover, analyze, and ultimately present factual information and expert opinions about cybercrimes or other digital activities. The computer forensic analyst uses various techniques and tools to guide his investigations. Tools such as Wireshark, Volatility, Autopsy, and others are popular forensic analysis tools across various operating systems. In recent years, containerized applications have become popular. Containers are not immune to cyberattacks, and when there are suspicious malicious activities, it may be useful to be able to investigate our container without disturbing the operation of that container. This is when &lt;code&gt;checkpoinctl&lt;/code&gt; came in handy. &lt;code&gt;checkpointcl&lt;/code&gt; is CLI project from the open-source organization CRIU (Checkpoint Restore In Userspace) that makes it easy to inspect container checkpoints created by CRIU. In this article, we will see how &lt;code&gt;checkpointcl&lt;/code&gt; can be used as a forensic analysis tool for container checkpoints.&lt;/p&gt;
&lt;h2 id="prerequisite"&gt;
Prerequisite
&lt;a href="#prerequisite" class="hanchor" ariaLabel="Anchor"&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;A Linux operating system&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Podman (&lt;a href="https://podman.io/docs/installation"&gt;Podman Installation Instructions&lt;/a&gt;)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://criu.org/Installation"&gt;CRIU&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://github.com/checkpoint-restore/checkpointctl"&gt;checkpointcl&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="creating-a-container-checkpoint"&gt;
Creating a container checkpoint
&lt;a href="#creating-a-container-checkpoint" class="hanchor" ariaLabel="Anchor"&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;We start by starting a Postgres container with Podman:&lt;/p&gt;
&lt;div class="highlight-wrapper"&gt;
&lt;div class="highlight-toolbar"&gt;
&lt;span class="item"&gt;
&lt;span class="label"&gt;Lang:&lt;/span&gt;
&lt;span class="name"&gt;bash&lt;/span&gt;
&lt;/span&gt;
&lt;button class="item right outline brighter hide js-btn-copy-code"&gt;Copy&lt;/button&gt;
&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;podman run --name postgres -d -e &lt;span class="nv"&gt;POSTGRES_PASSWORD&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;secret_password postgres&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Because checkpoints currently work with root containers only, it is necessary to run the Postgres container as root. I have switched to root for all the examples in this tutorial. Alternatively, you can prefix your commands with &lt;code&gt;sudo&lt;/code&gt; to achieve the same effect.&lt;/p&gt;
&lt;p&gt;Create a checkpoint for the container:&lt;/p&gt;
&lt;div class="highlight-wrapper"&gt;
&lt;div class="highlight-toolbar"&gt;
&lt;span class="item"&gt;
&lt;span class="label"&gt;Lang:&lt;/span&gt;
&lt;span class="name"&gt;bash&lt;/span&gt;
&lt;/span&gt;
&lt;button class="item right outline brighter hide js-btn-copy-code"&gt;Copy&lt;/button&gt;
&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;mkdir checkpoints
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="nb"&gt;cd&lt;/span&gt; checkpoints
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;podman container checkpoint postgres --leave-running --export postgres-checkpoint.tar.gz&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class="highlight-wrapper"&gt;
&lt;div class="highlight-toolbar"&gt;
&lt;span class="item"&gt;
&lt;span class="label"&gt;Lang:&lt;/span&gt;
&lt;span class="name"&gt;bash&lt;/span&gt;
&lt;/span&gt;
&lt;button class="item right outline brighter hide js-btn-copy-code"&gt;Copy&lt;/button&gt;
&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;ls postgres-checkpoint.tar.gz&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Install &lt;code&gt;checkpointctl&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight-wrapper"&gt;
&lt;div class="highlight-toolbar"&gt;
&lt;span class="item"&gt;
&lt;span class="label"&gt;Lang:&lt;/span&gt;
&lt;span class="name"&gt;bash&lt;/span&gt;
&lt;/span&gt;
&lt;button class="item right outline brighter hide js-btn-copy-code"&gt;Copy&lt;/button&gt;
&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;go install github.com/checkpoint-restore/checkpointctl@main&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Verify the installation:&lt;/p&gt;
&lt;div class="highlight-wrapper"&gt;
&lt;div class="highlight-toolbar"&gt;
&lt;span class="item"&gt;
&lt;span class="label"&gt;Lang:&lt;/span&gt;
&lt;span class="name"&gt;bash&lt;/span&gt;
&lt;/span&gt;
&lt;button class="item right outline brighter hide js-btn-copy-code"&gt;Copy&lt;/button&gt;
&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;checkpointctl --help&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id="checkpoint-analysis-with-checkpointctl"&gt;
Checkpoint analysis with &lt;code&gt;checkpointctl&lt;/code&gt;
&lt;a href="#checkpoint-analysis-with-checkpointctl" class="hanchor" ariaLabel="Anchor"&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;Use &lt;code&gt;show&lt;/code&gt; subcommand to get an overview of the checkpoint.&lt;/p&gt;
&lt;div class="highlight-wrapper"&gt;
&lt;div class="highlight-toolbar"&gt;
&lt;span class="item"&gt;
&lt;span class="label"&gt;Lang:&lt;/span&gt;
&lt;span class="name"&gt;bash&lt;/span&gt;
&lt;/span&gt;
&lt;button class="item right outline brighter hide js-btn-copy-code"&gt;Copy&lt;/button&gt;
&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;checkpointctl show postgres-checkpoint.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Displaying container checkpoint data from postgres-checkpoint.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;+-----------+-----------------------------------+--------------+---------+---------------------------+--------+------------+-------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;|&lt;/span&gt; CONTAINER &lt;span class="p"&gt;|&lt;/span&gt; IMAGE &lt;span class="p"&gt;|&lt;/span&gt; ID &lt;span class="p"&gt;|&lt;/span&gt; RUNTIME &lt;span class="p"&gt;|&lt;/span&gt; CREATED &lt;span class="p"&gt;|&lt;/span&gt; ENGINE &lt;span class="p"&gt;|&lt;/span&gt; CHKPT SIZE &lt;span class="p"&gt;|&lt;/span&gt; ROOT FS DIFF SIZE &lt;span class="p"&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;+-----------+-----------------------------------+--------------+---------+---------------------------+--------+------------+-------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;|&lt;/span&gt; postgres &lt;span class="p"&gt;|&lt;/span&gt; docker.io/library/postgres:latest &lt;span class="p"&gt;|&lt;/span&gt; e95b555d040d &lt;span class="p"&gt;|&lt;/span&gt; crun &lt;span class="p"&gt;|&lt;/span&gt; 2024-01-28T14:37:56-05:00 &lt;span class="p"&gt;|&lt;/span&gt; Podman &lt;span class="p"&gt;|&lt;/span&gt; 27.3 MiB &lt;span class="p"&gt;|&lt;/span&gt; 2.0 KiB &lt;span class="p"&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;+-----------+-----------------------------------+--------------+---------+---------------------------+--------+------------+-------------------+&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Use &lt;code&gt;inspect&lt;/code&gt; subcommand to get more detailed information about the container checkpoint.&lt;/p&gt;
&lt;div class="highlight-wrapper"&gt;
&lt;div class="highlight-toolbar"&gt;
&lt;span class="item"&gt;
&lt;span class="label"&gt;Lang:&lt;/span&gt;
&lt;span class="name"&gt;bash&lt;/span&gt;
&lt;/span&gt;
&lt;button class="item right outline brighter hide js-btn-copy-code"&gt;Copy&lt;/button&gt;
&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;checkpointctl inspect postgres-checkpoint.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Displaying container checkpoint tree view from postgres-checkpoint.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;postgres
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;├── Image: docker.io/library/postgres:latest
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;├── ID: e95b555d040dcb2f61c3c8f62511827e58b8733456f3ec797c4a846c4bd7ac8c
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;├── Runtime: crun
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;├── Created: 2024-01-28T14:37:56-05:00
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;├── Engine: Podman
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;├── Checkpoint size: 27.3 MiB
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;│ └── Memory pages size: 27.2 MiB
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;└── Root FS diff size: 2.0 KiB&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To see the process tree of the container, add the &lt;code&gt;--ps-tree&lt;/code&gt; option:&lt;/p&gt;
&lt;div class="highlight-wrapper"&gt;
&lt;div class="highlight-toolbar"&gt;
&lt;span class="item"&gt;
&lt;span class="label"&gt;Lang:&lt;/span&gt;
&lt;span class="name"&gt;bash&lt;/span&gt;
&lt;/span&gt;
&lt;button class="item right outline brighter hide js-btn-copy-code"&gt;Copy&lt;/button&gt;
&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;checkpointctl inspect postgres-checkpoint.tar.gz --ps-tree
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Displaying container checkpoint tree view from postgres-checkpoint.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;postgres
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;├── Image: docker.io/library/postgres:latest
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;├── ID: e95b555d040dcb2f61c3c8f62511827e58b8733456f3ec797c4a846c4bd7ac8c
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;├── Runtime: crun
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;├── Created: 2024-01-28T14:37:56-05:00
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;├── Engine: Podman
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;├── Checkpoint size: 27.3 MiB
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;│ └── Memory pages size: 27.2 MiB
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;├── Root FS diff size: 2.0 KiB
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;└── Process tree
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; └── &lt;span class="o"&gt;[&lt;/span&gt;1&lt;span class="o"&gt;]&lt;/span&gt; postgres
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; ├── &lt;span class="o"&gt;[&lt;/span&gt;55&lt;span class="o"&gt;]&lt;/span&gt; postgres
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; ├── &lt;span class="o"&gt;[&lt;/span&gt;56&lt;span class="o"&gt;]&lt;/span&gt; postgres
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; ├── &lt;span class="o"&gt;[&lt;/span&gt;58&lt;span class="o"&gt;]&lt;/span&gt; postgres
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; ├── &lt;span class="o"&gt;[&lt;/span&gt;59&lt;span class="o"&gt;]&lt;/span&gt; postgres
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt; └── &lt;span class="o"&gt;[&lt;/span&gt;60&lt;span class="o"&gt;]&lt;/span&gt; postgres&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;inspect&lt;/code&gt; subcommand provides additional capabilities, so refer to the command-line documentation for more details:&lt;/p&gt;
&lt;div class="highlight-wrapper"&gt;
&lt;div class="highlight-toolbar"&gt;
&lt;span class="item"&gt;
&lt;span class="label"&gt;Lang:&lt;/span&gt;
&lt;span class="name"&gt;bash&lt;/span&gt;
&lt;/span&gt;
&lt;button class="item right outline brighter hide js-btn-copy-code"&gt;Copy&lt;/button&gt;
&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;checkpointctl inspect --help&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Finally, you can use &lt;code&gt;memparse&lt;/code&gt; subcommand to read the contents of the memory pages of the container checkpoint to get a more in-depth overview of the state of the container when it was checkpointed.&lt;/p&gt;
&lt;div class="highlight-wrapper"&gt;
&lt;div class="highlight-toolbar"&gt;
&lt;span class="item"&gt;
&lt;span class="label"&gt;Lang:&lt;/span&gt;
&lt;span class="name"&gt;bash&lt;/span&gt;
&lt;/span&gt;
&lt;button class="item right outline brighter hide js-btn-copy-code"&gt;Copy&lt;/button&gt;
&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;checkpointctl memparse postgres-checkpoint.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Displaying processes memory sizes from postgres-checkpoint.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;+-----+--------------+-------------+--------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;|&lt;/span&gt; PID &lt;span class="p"&gt;|&lt;/span&gt; PROCESS NAME &lt;span class="p"&gt;|&lt;/span&gt; MEMORY SIZE &lt;span class="p"&gt;|&lt;/span&gt; SHARED MEMORY SIZE &lt;span class="p"&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;+-----+--------------+-------------+--------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; postgres &lt;span class="p"&gt;|&lt;/span&gt; 2.3 MiB &lt;span class="p"&gt;|&lt;/span&gt; 142.6 MiB &lt;span class="p"&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;+-----+--------------+-------------+--------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;55&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; postgres &lt;span class="p"&gt;|&lt;/span&gt; 2.3 MiB &lt;span class="p"&gt;|&lt;/span&gt; 142.6 MiB &lt;span class="p"&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;+-----+--------------+-------------+--------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;56&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; postgres &lt;span class="p"&gt;|&lt;/span&gt; 2.3 MiB &lt;span class="p"&gt;|&lt;/span&gt; 142.6 MiB &lt;span class="p"&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;+-----+--------------+-------------+--------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;58&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; postgres &lt;span class="p"&gt;|&lt;/span&gt; 2.3 MiB &lt;span class="p"&gt;|&lt;/span&gt; 142.6 MiB &lt;span class="p"&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;+-----+--------------+-------------+--------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;59&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; postgres &lt;span class="p"&gt;|&lt;/span&gt; 2.6 MiB &lt;span class="p"&gt;|&lt;/span&gt; 143.6 MiB &lt;span class="p"&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;+-----+--------------+-------------+--------------------+
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="p"&gt;|&lt;/span&gt; &lt;span class="m"&gt;60&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; postgres &lt;span class="p"&gt;|&lt;/span&gt; 2.5 MiB &lt;span class="p"&gt;|&lt;/span&gt; 143.6 MiB &lt;span class="p"&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;+-----+--------------+-------------+--------------------+&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;To display the contents of memory pages for a specific process (e.g., PID 1), use:&lt;/p&gt;
&lt;div class="highlight-wrapper"&gt;
&lt;div class="highlight-toolbar"&gt;
&lt;span class="item"&gt;
&lt;span class="label"&gt;Lang:&lt;/span&gt;
&lt;span class="name"&gt;bash&lt;/span&gt;
&lt;/span&gt;
&lt;button class="item right outline brighter hide js-btn-copy-code"&gt;Copy&lt;/button&gt;
&lt;/div&gt;&lt;div class="highlight"&gt;&lt;pre tabindex="0" class="chroma"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;checkpointctl memparse postgres-checkpoint.tar.gz --pid&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;1&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt; less
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Displaying memory pages content &lt;span class="k"&gt;for&lt;/span&gt; process ID &lt;span class="m"&gt;1&lt;/span&gt; from checkpoint: postgres-checkpoint.tar.gz
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;Address Hexadecimal ASCII
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;-------------------------------------------------------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;000055996b20a000 &lt;span class="m"&gt;48&lt;/span&gt; &lt;span class="m"&gt;83&lt;/span&gt; ec &lt;span class="m"&gt;08&lt;/span&gt; &lt;span class="m"&gt;48&lt;/span&gt; 8b &lt;span class="m"&gt;05&lt;/span&gt; 3d 0f &lt;span class="m"&gt;79&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;48&lt;/span&gt; &lt;span class="m"&gt;85&lt;/span&gt; c0 &lt;span class="m"&gt;74&lt;/span&gt; &lt;span class="m"&gt;02&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;H...H..&lt;span class="o"&gt;=&lt;/span&gt;.y.H..t.&lt;span class="p"&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;000055996b20a010 ff d0 &lt;span class="m"&gt;48&lt;/span&gt; &lt;span class="m"&gt;83&lt;/span&gt; c4 &lt;span class="m"&gt;08&lt;/span&gt; c3 &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;..H.............&lt;span class="p"&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;000055996b20a020 ff &lt;span class="m"&gt;35&lt;/span&gt; &lt;span class="m"&gt;52&lt;/span&gt; fe &lt;span class="m"&gt;78&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; ff &lt;span class="m"&gt;25&lt;/span&gt; &lt;span class="m"&gt;54&lt;/span&gt; fe &lt;span class="m"&gt;78&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; 0f 1f &lt;span class="m"&gt;40&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="p"&gt;|&lt;/span&gt;.5R.x..%T.x...@.&lt;span class="p"&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;000055996b20a030 ff &lt;span class="m"&gt;25&lt;/span&gt; &lt;span class="m"&gt;52&lt;/span&gt; fe &lt;span class="m"&gt;78&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;68&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; e9 e0 ff ff ff &lt;span class="p"&gt;|&lt;/span&gt;.%R.x.h.........&lt;span class="p"&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;000055996b20a040 ff &lt;span class="m"&gt;25&lt;/span&gt; 4a fe &lt;span class="m"&gt;78&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;68&lt;/span&gt; &lt;span class="m"&gt;01&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; e9 d0 ff ff ff &lt;span class="p"&gt;|&lt;/span&gt;.%J.x.h.........&lt;span class="p"&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;000055996b20a050 ff &lt;span class="m"&gt;25&lt;/span&gt; &lt;span class="m"&gt;42&lt;/span&gt; fe &lt;span class="m"&gt;78&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;68&lt;/span&gt; &lt;span class="m"&gt;02&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; e9 c0 ff ff ff &lt;span class="p"&gt;|&lt;/span&gt;.%B.x.h.........&lt;span class="p"&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;000055996b20a060 ff &lt;span class="m"&gt;25&lt;/span&gt; 3a fe &lt;span class="m"&gt;78&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;68&lt;/span&gt; &lt;span class="m"&gt;03&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; e9 b0 ff ff ff &lt;span class="p"&gt;|&lt;/span&gt;.%:.x.h.........&lt;span class="p"&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;000055996b20a070 ff &lt;span class="m"&gt;25&lt;/span&gt; &lt;span class="m"&gt;32&lt;/span&gt; fe &lt;span class="m"&gt;78&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;68&lt;/span&gt; &lt;span class="m"&gt;04&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; e9 a0 ff ff ff &lt;span class="p"&gt;|&lt;/span&gt;.%2.x.h.........&lt;span class="p"&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;000055996b20a080 ff &lt;span class="m"&gt;25&lt;/span&gt; 2a fe &lt;span class="m"&gt;78&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;68&lt;/span&gt; &lt;span class="m"&gt;05&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; e9 &lt;span class="m"&gt;90&lt;/span&gt; ff ff ff &lt;span class="p"&gt;|&lt;/span&gt;.%*.x.h.........&lt;span class="p"&gt;|&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;000055996b20a090 ff &lt;span class="m"&gt;25&lt;/span&gt; &lt;span class="m"&gt;22&lt;/span&gt; fe &lt;span class="m"&gt;78&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;68&lt;/span&gt; &lt;span class="m"&gt;06&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; &lt;span class="m"&gt;00&lt;/span&gt; e9 &lt;span class="m"&gt;80&lt;/span&gt; ff ff ff &lt;span class="p"&gt;|&lt;/span&gt;.%&lt;span class="s2"&gt;&amp;#34;.x.h.........|
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="s2"&gt;000055996b20a0a0 ff 25 1a fe 78 00 68 07 00 00 00 e9 70 ff ff ff |.%..x.h.....p...|
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="s2"&gt;000055996b20a0b0 ff 25 12 fe 78 00 68 08 00 00 00 e9 60 ff ff ff |.%..x.h.....`...|
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="s2"&gt;000055996b20a0c0 ff 25 0a fe 78 00 68 09 00 00 00 e9 50 ff ff ff |.%..x.h.....P...|
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="s2"&gt;000055996b20a0d0 ff 25 02 fe 78 00 68 0a 00 00 00 e9 40 ff ff ff |.%..x.h.....@...|
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="s2"&gt;000055996b20a0e0 ff 25 fa fd 78 00 68 0b 00 00 00 e9 30 ff ff ff |.%..x.h.....0...|
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class="line"&gt;&lt;span class="cl"&gt;&lt;span class="s2"&gt;000055996b20a0f0 ff 25 f2 fd 78 00 68 0c 00 00 00 e9 20 ff ff ff |.%..x.h..... ...|&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id="conclusion"&gt;
Conclusion
&lt;a href="#conclusion" class="hanchor" ariaLabel="Anchor"&gt;&lt;/a&gt;
&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;checkpointctl&lt;/code&gt; is a powerful tool for forensic analysis of container checkpoints, allowing investigators to scrutinize and understand the state of a container at a specific point in time. Its capabilities provide insights into the container&amp;rsquo;s configuration, processes, files, and memory, facilitating effective forensic examinations in the ever-evolving landscape of cyber threats.&lt;/p&gt;</content></item><item><title>Discovering Kernel Fuzzing</title><link>https://behouba.github.io/2022/08/discovering-kernel-fuzzing/</link><pubDate>Sun, 14 Aug 2022 18:45:52 +0300</pubDate><guid>https://behouba.github.io/2022/08/discovering-kernel-fuzzing/</guid><description>&lt;p&gt;This year, during an industrial project that is part of my master&amp;rsquo;s program, I had the opportunity to make my first steps into the world of kernel fuzzing. This was a great learning experience, during which I had the opportunity to work with wonderful people. In this blog post, I will describe my journey into the world of kernel fuzzing.&lt;/p&gt;
&lt;p&gt;I have to admit that I didn&amp;rsquo;t know anything about fuzzing when I was finishing my first semester of the Master of Software Engineering at &lt;a href="https://innopolis.university/en/"&gt;Innopolis University&lt;/a&gt;. Before the end of the first semester, we have to choose an industrial project for the next semester. To do so, we attended multiple project presentation sessions with representatives of different companies. During the project presentations, we were presented with many interesting projects covering various areas of software engineering. One project from KasperskyLab was the most appealing to me; I don&amp;rsquo;t know exactly why, since I didn&amp;rsquo;t know anything about the project before the presentation. But I think it was because I wanted to learn something outside of my comfort zone. The project was presented by Anna Melekhova, a senior engineer at KasperskyLab. The project was about researching kernel fuzzing approaches and their implementation for Kaspersky OS, a new operating system in development at KasperskyLab. I chose this project and got it accepted along with four other classmates.&lt;/p&gt;</description><content>&lt;p&gt;This year, during an industrial project that is part of my master&amp;rsquo;s program, I had the opportunity to make my first steps into the world of kernel fuzzing. This was a great learning experience, during which I had the opportunity to work with wonderful people. In this blog post, I will describe my journey into the world of kernel fuzzing.&lt;/p&gt;
&lt;p&gt;I have to admit that I didn&amp;rsquo;t know anything about fuzzing when I was finishing my first semester of the Master of Software Engineering at &lt;a href="https://innopolis.university/en/"&gt;Innopolis University&lt;/a&gt;. Before the end of the first semester, we have to choose an industrial project for the next semester. To do so, we attended multiple project presentation sessions with representatives of different companies. During the project presentations, we were presented with many interesting projects covering various areas of software engineering. One project from KasperskyLab was the most appealing to me; I don&amp;rsquo;t know exactly why, since I didn&amp;rsquo;t know anything about the project before the presentation. But I think it was because I wanted to learn something outside of my comfort zone. The project was presented by Anna Melekhova, a senior engineer at KasperskyLab. The project was about researching kernel fuzzing approaches and their implementation for Kaspersky OS, a new operating system in development at KasperskyLab. I chose this project and got it accepted along with four other classmates.&lt;/p&gt;
&lt;p&gt;According to &lt;a href="https://en.wikipedia.org/wiki/Fuzzing"&gt;Wikipedia&lt;/a&gt; &amp;ldquo;fuzzing or fuzz testing is an automated software testing technique that involves providing invalid, unexpected, or random data as inputs to a computer program.&amp;rdquo; So, the way I see it, fuzzing is like tricking a software system. You feed it lots of silly, crazy, and random things to see if it can handle them. The goal of this testing approach is to proactively reveal flaws in the software that might be difficult to find with traditional testing approaches.&lt;/p&gt;
&lt;p&gt;The &lt;a href="https://en.wikipedia.org/wiki/Kernel_(operating_system)"&gt;kernel,&lt;/a&gt; on the other hand, is the core component of a computer&amp;rsquo;s operating system. Depending on design choices and architecture, the kernel has more or less complete control over everything in the system.&lt;/p&gt;
&lt;p&gt;The first week was dedicated to initial research in order to learn as much as possible about fuzzing in general. I went to many websites, read several articles about fuzzing, and finally, I found a good book on the topic, &amp;ldquo;Fuzzing for Software Security Testing and Quality Assurance, Second Edition&amp;rdquo; written by: Ari Takanen, Jared D. Demott, and Charles Miller. Although I didn&amp;rsquo;t read the book cover to cover, I got very good information from It and was confident enough to move on. I recommend reading this book if you want to learn about fuzzing.&lt;/p&gt;
&lt;p&gt;After I got familiar with the topic of fuzz testing, I started learning about the target system, KasperskyOS. KasperskyOS is a microkernel operating system developed by the company KasperskyLab. KasperskyOS is designed with cyber immunity features in mind. While the source code of this operating system is proprietary and closed source, a publicly available version of our OS is freely available &lt;a href="https://support.kaspersky.com/help/KCE/1.1/en-US/whats_new.htm"&gt;here&lt;/a&gt;. The community edition is the best way for developers to learn about the OS and develop applications for it.&lt;/p&gt;
&lt;p&gt;At this point, we have to start researching fuzzing solutions for KasperskyOS. We performed our research by reading several research papers on the topic of kernel fuzzing. At the end of the research, the team agreed that we should work on extending a state-of-the-art kernel fuzzer called Syzkaller. Syzkaller is a popular kernel fuzzing tool developed and maintained by Google. Syzkaller is an unsupervised coverage-guided kernel fuzzer, meaning that it uses coverage data to guide a fully automated fuzzing process.&lt;/p&gt;
&lt;p&gt;By following the documentation on the GitHub repository of syzkaller, I set up my local fuzzing environment to fuzz the Linux kernel to see how syzkaller works. Syzkaller has a modular design, its main component is called syz-manager and it is a program written in Golang and running on the host system. syz-manager spins off multiple virtual machines. The actual fuzzing happens inside each virtual machine. Inside a virtual machine is the target operating system, alongside other components such as syzkaller, syz-fuzzer , and syz-executor. syz-fuzzer guides the fuzzing process (input generation, mutation, minimization, etc.) and sends inputs that trigger new coverage back to the syz-manager process. The picture below, taken from syzkaller &lt;a href="https://github.com/google/syzkaller/blob/master/docs/internals.md"&gt;documentation&lt;/a&gt; gives a visual presentation of how the syzkaller fuzzing process works.&lt;/p&gt;
&lt;p&gt;&lt;img src="https://raw.githubusercontent.com/google/syzkaller/master/docs/process_structure.png" alt=""&gt;&lt;/p&gt;
&lt;p&gt;After our experimentations with syzkaller, we find out that, in order to be able to use syzkaller to fuzz KasperskyOS we have to develop a custom implementation of syz-executor and syz-fuzzer that will run in the user-space inside a virtual machine running KasperskyOS. Then, we faced one issue, syz-fuzzer is written in Golang, and the KasperskyOS platform is not supported by Golang. So we couldn&amp;rsquo;t compile syz-fuzzer for KasperskyOS. We looked at other operating systems to see if they were similar case and how this issue was addressed. It turned out that FuchsiaOS from Google has many things in common with KasperskyOS. The FuchsiaOS platform is also not supported by Golang, so Syzkaller has a mode called &amp;ldquo;host fuzzer&amp;rdquo; making it possible to run syz-fuzzer on the host system. So we tried to do something similar for KasperskyOS, to be stuck again by another limitation. This limitation was related to the fact that KasperskyOS didn&amp;rsquo;t have an ssh server at that time. The fuzzing process of Syzkaller involves establishing an ssh connection between syz-manager/syz-fuzzer and the target system in order to execute syz-executor remotely.&lt;/p&gt;
&lt;p&gt;At this point, it became clear that there was nothing more we could do and that we couldn&amp;rsquo;t use SyzKaller to fuzz KasperskyOS until KasperskyLab added an SSH server to their OS. To go further in this learning journey, and after discussing with the representative of the company, we decided to fall back on FuchsiaOS to complete the course project. As stated above, FuchsiaOS is in many aspects similar to KasperskyOS, and Syzkaller support for FuchsiaOS was broken, and we wanted to try to fix it. Luckily enough, it wasn&amp;rsquo;t very hard, and I was able to fix this in a few days with the help of Syzkaller maintainer &lt;a href="https://github.com/dvyukov"&gt;Dmitry Vyukov&lt;/a&gt;. Here is my &lt;a href="https://github.com/google/syzkaller/pull/3205"&gt;pull request&lt;/a&gt; that fixed the support for FuchsiaOS.&lt;/p&gt;
&lt;p&gt;Overall, this was a great experience for me personally to learn about kernel fuzzing with Syzkaller. I cannot conclude this post without saying thank you to everyone involved in the project. to Anna Melekhova for her time and valuable guidance during the project. to &lt;a href="https://github.com/dvyukov"&gt;Dmitry Vyukov&lt;/a&gt;, for the time dedicated to reviewing my pull request and answering our questions. to all my team members and our mentor.&lt;/p&gt;</content></item></channel></rss>